import telebot
from telebot import types
import time
import random

import config
from services import Session

bot = telebot.TeleBot(config.TOKEN)


def generate_random_congratulation():
    return random.choice(config.PHRASES) + random.choice(config.SMILES[0])


def print_question(message, question, session=Session()):
    session.question = question

    markup = types.InlineKeyboardMarkup(row_width=2)
    item1 = types.InlineKeyboardButton(f'{question[1][0]}', callback_data=f'{question[1][1]}')
    item2 = types.InlineKeyboardButton(f'{question[2][0]}', callback_data=f'{question[2][1]}')
    markup.add(item1, item2)

    mess = question['text']
    picture = open(f'pictures/questions/{question["picture"]}.jpeg', 'rb')

    bot.send_photo(message.chat.id, picture)
    bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)


def show_cart(message, session=Session()):
    if session.cart:
        mess = '<b>–í–∞—à–∏ –ø–æ–∫—É–ø–∫–∏:</b>\n'
        count = 1
        for product in session.cart:
            mess += f"<b>{count}.</b> {product['title']}\n"
            count += 1
    else:
        mess = '<b>–ü–æ–∫–∞ —á—Ç–æ —É –≤–∞—Å –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫</b>'
    mess += f'\n\n –ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É <b>{session.points}$</b>'
    bot.send_message(message.chat.id, mess, parse_mode='html')


def print_products(message, session=Session()):
    products = config.PRODUCTS
    markup = types.InlineKeyboardMarkup(row_width=3)
    mess = f'–£ –≤–∞—Å <b>{session.points}$</b> \n\n–°–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤:\n'
    for product in products:
        if product not in session.sold_products:
            index = products.index(product)
            mess += f"<b>–õ–æ—Ç ‚Ññ{index + 1}.</b> {products[index]['title']} - <b>{products[index]['price']}$</b>\n"
            item = types.InlineKeyboardButton(f'{index + 1} - {products[index]["price"]}$', callback_data=f'prod{index + 1}')
            markup.add(item)
    bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)


def show_product(message, product):
    mess = f'<b>{product["title"]}</b>\n \n{product["description"]}'
    # bot.send_message(message.chat.id, mess, parse_mode='html')
    if product['picture'] != '':
        picture = open(f'pictures/products/{product["picture"]}.jpeg', 'rb')
        bot.send_photo(message.chat.id, picture, caption=mess, parse_mode='html')


@bot.message_handler(commands=['start'])
def welcome(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    item1 = types.KeyboardButton('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ‚öôÔ∏è')
    item2 = types.KeyboardButton('–ù–∞—á–∞—Ç—å üöÄ')
    markup.add(item1, item2)

    mess = f'–î–∞–Ω–Ω—ã–π –±–æ—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–∑–¥—Ä–∞–≤–ª—è—Ç—å –º–æ—é –∫—É—Ä–æ—á–∫—É <b>Mort@l Sun</b> ' \
           f'–≤ —Ç–µ—á–µ–Ω–∏–µ –≤—Å–µ–≥–æ –¥–Ω—è!\n–ï—Å–ª–∏ —Ç—ã —É–∂–µ —á–∏—Ç–∞–ª–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é, —Ç–æ –Ω–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫—É <b>"–ù–∞—á–∞—Ç—å üöÄ"</b>.\n–ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ ' \
           f'–æ—á–µ–Ω—å —Å–æ–≤–µ—Ç—É—é —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –µ–µ, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É <b>"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ‚öôÔ∏è"</b>, —á—Ç–æ–±—ã –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å!'
    sticker = open('stickers/start.webp', 'rb')
    bot.send_sticker(message.chat.id, sticker)
    bot.send_message(message.chat.id, mess, reply_markup=markup, parse_mode='html')


@bot.message_handler(content_types=['text'])
def instruction_text(message):
    session = Session()

    # –í—ã–≤–æ–¥ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    if message.text in ['–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ‚öôÔ∏è', 'help', 'Help', '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', '–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è']:
        mess = config.INSTRUCTION
        bot.send_message(message.chat.id, mess, parse_mode='html')

    # –û—Å–Ω–æ–≤–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ
    elif message.text == '–ù–∞—á–∞—Ç—å üöÄ':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        # item1 = types.KeyboardButton('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ‚öôÔ∏è')
        item2 = types.KeyboardButton('–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ üéØ')
        item3 = types.KeyboardButton('–°–ª—É—á–∞–π–Ω–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ üé≤')
        item4 = types.KeyboardButton('–ú–∞–≥–∞–∑–∏–Ω (magazine) üíµ')
        item5 = types.KeyboardButton('–í–∞—à–∏ –ø–æ–∫—É–ø–∫–∏ üéÅ')
        markup.add(item2, item3, item4, item5)
        bot.send_message(message.chat.id, '–¢–µ–ø–µ—Ä—å –∫–∞–∂–¥—ã–µ –ø–æ–ª —á–∞—Å–∞ —Ç–µ–±–µ –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ, –∞ —Ç—ã –ø–æ–∫–∞ –º–æ–∂–µ—à—å –ø–æ–æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –≤ <b>"–í–∏–∫—Ç–æ—Ä–∏–Ω–µüéØ"</b> –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å <b>"–°–ª—É—á–∞–π–Ω–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µüé≤"</b>', reply_markup=markup, parse_mode='html')
        time.sleep(2)
        while True:
            try:
                number = session.get_next_number_of_photo()
                picture = open(f'pictures/photos/{number}.jpeg', 'rb')
                mess = config.TEXT_FOR_CONGRATULATIONS[number]
                bot.send_photo(message.chat.id, picture, caption=mess, parse_mode='html')
                # bot.send_message(message.chat.id, mess, parse_mode='html')
            except FileNotFoundError:
                mess = '–ù–∞ —ç—Ç–æ–º –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è'
                bot.send_message(message.chat.id, mess, parse_mode='html')
                # –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä –∏ –ø–æ–º–µ–Ω—è—Ç—å —Ç–µ–∫—Å—Ç
                break
            time.sleep(1800)

    # –í–∏–∫—Ç–æ—Ä–∏–Ω–∞
    elif message.text == '–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ üéØ':
        if session.quest_number == 0:
            mess = '–°–µ–π—á–∞—Å –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤–æ–ø—Ä–æ—Å—ã, –∑–∞ –∫–∞–∂–¥—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å <b>+10$</b>'
        else:
            mess = '–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É, –∑–∞ –∫–∞–∂–¥—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å <b>+10$</b>'
        bot.send_message(message.chat.id, mess, parse_mode='html')
        time.sleep(1)
        try:
            print_question(message, config.QUESTIONS[session.quest_number])
        except IndexError:
            bot.send_message(message.chat.id,
                             f'–í–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –Ω–∞ —Ç–≤–æ–µ–º —Å—á–µ—Ç—É <b>{session.points}$</b>. –ë–µ–≥–∏ —Å–∫–æ—Ä–µ–µ —Ç—Ä–∞—Ç–∏—Ç—å –∏—Ö –≤ –º–∞–≥–∞–∑–∏–Ω!',
                             parse_mode='html')

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è
    elif message.text == '–°–ª—É—á–∞–π–Ω–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ üé≤':
        mess = generate_random_congratulation()
        bot.send_message(message.chat.id, mess, parse_mode='html')

    # –ú–∞–≥–∞–∑–∏–Ω
    elif message.text == '–ú–∞–≥–∞–∑–∏–Ω (magazine) üíµ':
        print_products(message)

    elif message.text == '–í–∞—à–∏ –ø–æ–∫—É–ø–∫–∏ üéÅ':
        show_cart(message)

    elif message.text == '19.08.1996':
        session.points += 11000
        mess = f'–¢—ã –≤–≤–µ–ª–∞ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥. –¢–≤–æ–π —Å—á–µ—Ç —É–≤–µ–ª–∏—á–∏–ª—Å—è –Ω–∞ <b>+11000$</b>. –ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É <b>{session.points}$</b>'
        bot.send_message(message.chat.id, mess, parse_mode='html')


    # –û–±—Ä–∞–±–æ–ª—Ç—á–∏–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    else:
        mess = '–¢—ã –≤–≤–µ–ª–∞ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ, –ø—Ä–æ–≤–µ—Ä—å —Ç–µ–∫—Å—Ç –Ω–∞ –æ–ø–µ—á–∞—Ç–∫–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑...'
        sticker = open('stickers/gg.webp', 'rb')
        bot.send_message(message.chat.id, mess, parse_mode='html')
        bot.send_sticker(message.chat.id, sticker)


@bot.callback_query_handler(func=lambda call:True)
def callback_inline(call):
    session = Session()

    markup = types.InlineKeyboardMarkup(row_width=1)
    item = types.InlineKeyboardButton('–ü–æ–µ—Ö–∞–ª–∏', callback_data='next')
    markup.add(item)

    # Callback –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    if call.message:
        if call.data == 'yes':
            session.add_points()
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=call.message.text, reply_markup=None)
            bot.send_message(call.message.chat.id, text='<b>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</b>', parse_mode='html')
            if 'ps' in session.question.keys():
                bot.send_message(call.message.chat.id, f'P.S. {session.question["ps"]}')
            bot.send_message(call.message.chat.id, f'<b>–£ –≤–∞—Å {session.points}$</b>', parse_mode='html')
            session.quest_number += 1
            time.sleep(1)
            bot.send_message(call.message.chat.id, '–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å', reply_markup=markup)

        elif call.data == 'no':
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=call.message.text, reply_markup=None)
            bot.send_message(call.message.chat.id, text='<b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ :(</b>', parse_mode='html')
            if 'ps' in session.question.keys():
                bot.send_message(call.message.chat.id, f'P.S. {session.question["ps"]}')
            bot.send_message(call.message.chat.id, f'<b>–£ –≤–∞—Å {session.points}$</b>', parse_mode='html')
            session.quest_number += 1
            time.sleep(1)
            bot.send_message(call.message.chat.id, '–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å', reply_markup=markup)

        elif call.data == 'next':
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–ü–æ–µ—Ö–∞–ª–∏', reply_markup=None)
            try:
                print_question(call.message, config.QUESTIONS[session.quest_number])
            except IndexError:
                bot.send_message(call.message.chat.id, f'–í–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –Ω–∞ —Ç–≤–æ–µ–º —Å—á–µ—Ç—É <b>{session.points}$</b>. –ë–µ–≥–∏ —Å–∫–æ—Ä–µ–µ —Ç—Ä–∞—Ç–∏—Ç—å –∏—Ö –≤ –º–∞–≥–∞–∑–∏–Ω!', parse_mode='html')

        # Cart product
        elif call.data in [f'prod{x}' for x in range(len(config.PRODUCTS) + 1)]:
            product = config.PRODUCTS[int(call.data[-1]) - 1]
            if session.add_to_cart(product):
                session.sold_products.append(product)
                # file = open('logs.txt', 'w')
                # file.write(product['title'])
                # file.close()
                mess ='(*–í–∞—à —Ç–æ–≤–∞—Ä –æ–ø–ª–∞—á–µ–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É)'
                show_product(call.message, product)
            else:
                mess ='(*–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏)'
            bot.send_message(chat_id=call.message.chat.id, text=f'<i>{mess}</i>', parse_mode='html')
            # show_cart(call.message)
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=call.message.text, reply_markup=None, parse_mode='html')


bot.polling(none_stop=True)